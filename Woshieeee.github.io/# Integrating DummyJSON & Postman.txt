# Integrating DummyJSON & Postman

You’ll now use the public DummyJSON service as your data source (System B) and test everything with Postman. System A remains a vanilla HTML/CSS/JS client that fetches from your local proxy.

---

## 1. System B: Node.js Proxy to DummyJSON

This HTTP server listens on `/v1/users`, forwards the request to DummyJSON, then returns the JSON to any origin.

```javascript
// system-b/server.js
const http = require('http');
const https = require('https');

const PORT = 3000;
const DUMMY_URL = 'https://dummyjson.com/users';

const server = http.createServer((req, res) => {
  if (req.method === 'GET' && req.url === '/v1/users') {
    // Proxy request to DummyJSON
    https
      .get(DUMMY_URL, dummyRes => {
        let data = '';
        dummyRes.on('data', chunk => (data += chunk));
        dummyRes.on('end', () => {
          res.setHeader('Content-Type', 'application/json');
          res.setHeader('Access-Control-Allow-Origin', '*');
          res.writeHead(200);
          res.end(data);
        });
      })
      .on('error', err => {
        res.writeHead(502, { 'Content-Type': 'application/json' });
        res.end(JSON.stringify({ error: 'Upstream error', details: err.message }));
      });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(PORT, () => {
  console.log(`Proxy API running at http://localhost:${PORT}/v1/users`);
});
```

Steps to run:

1. `cd system-b`  
2. `node server.js`  

---

## 2. System A: Static Front End

Just point your fetch at the local proxy instead of a static array.

### index.html

```html
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <title>User Directory</title>
  <link rel="stylesheet" href="style.css" />
</head>
<body>
  <div class="container">
    <h1>User Directory</h1>
    <ul id="user-list"></ul>
  </div>
  <script src="main.js"></script>
</body>
</html>
```

### style.css

```css
body {
  font-family: Arial, sans-serif;
  background: #f4f4f4;
  margin: 0;
  padding: 20px;
}

.container {
  max-width: 600px;
  margin: auto;
  background: #fff;
  padding: 20px;
  border-radius: 6px;
  box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
}

h1 {
  text-align: center;
  color: #333;
}

#user-list {
  list-style: none;
  padding: 0;
}

#user-list li {
  padding: 10px;
  border-bottom: 1px solid #ddd;
}

#error {
  color: red;
}
```

### main.js

```javascript
const API_URL = 'http://localhost:3000/v1/users';
const userList = document.getElementById('user-list');

async function fetchUsers() {
  try {
    const res = await fetch(API_URL);
    if (!res.ok) throw new Error(`Status ${res.status}`);
    const json = await res.json();
    renderUsers(json.users || []);
  } catch (err) {
    userList.innerHTML = `<li id="error">${err.message}</li>`;
  }
}

function renderUsers(users) {
  userList.innerHTML = '';
  users.forEach(u => {
    const li = document.createElement('li');
    li.textContent = `${u.id}. ${u.firstName} ${u.lastName}`;
    userList.appendChild(li);
  });
}

document.addEventListener('DOMContentLoaded', fetchUsers);
```

Open `system-a/index.html` in your browser (or serve it); you’ll see real dummy users.

---

## 3. Testing with Postman

### 3.1 Create an Environment

1. Click the gear icon → **Manage Environments** → **Add**.  
2. Name it `Local Proxy`.  
3. Add a variable:

   - Key: `API_URL`  
   - Value: `http://localhost:3000`  

4. Save and select `Local Proxy` in the top-right.

---

### 3.2 Import a Collection

Use this JSON to import a Postman collection:

```json
{
  "info": {
    "name": "DummyJSON Proxy",
    "_postman_id": "1234-5678-abcd",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "item": [
    {
      "name": "Get All Users",
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{API_URL}}/v1/users",
          "host": ["{{API_URL}}"],
          "path": ["v1", "users"]
        }
      },
      "response": []
    }
  ]
}
```

1. In Postman, click **Import** → **Raw text**, paste the JSON, then **Import**.  
2. You’ll see **Get All Users** under **DummyJSON Proxy**.

---

### 3.3 Send Requests

- Select **Get All Users**.  
- Hit **Send**.  
- Inspect the body—should be the same JSON returned by DummyJSON.

---

## Next Steps

- Add a **Create User** POST endpoint to your proxy that forwards to `https://dummyjson.com/users/add`.  
- In Postman, duplicate the GET request, change to POST, set `raw` JSON body, and test your proxy’s POST.  
- Add search in System A (`/v1/users/search?q=John`) and mirror it in the proxy.  
- Explore Postman tests (JavaScript snippets that assert response code, schema, etc.).  

With this setup, you’ve got a real-world workflow: public DummyJSON as your backend, Node.js as a proxy, a static front end, and Postman for manual testing.
